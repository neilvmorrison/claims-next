generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLASS_MEMBER
  INTERNAL_ADMINISTRATOR
  ADMINISTRATOR
}

enum ClaimStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum FormFieldTypes {
  INPUT
  TEXT_AREA
  DATE
  FILE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole
  accounts      Account[]
  sessions      Session[]
  Profile       Profile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id             String            @id @default(cuid())
  givenName      String
  familyName     String
  image          String?
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  claims         ClaimSubmission[]
  Organization   Organization?     @relation(fields: [organizationId], references: [id])
  organizationId String?
}

model Organization {
  id             String        @id @default(cuid())
  name           String
  description    String?       @db.Text
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  classActions   ClassAction[]
  administrators Profile[]
}

model ClassAction {
  id               String             @id @default(cuid())
  name             String
  description      String?            @db.Text
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  organization     Organization       @relation(fields: [organizationId], references: [id])
  formFields       FormField[]
  organizationId   String
  claimSubmissions ClaimSubmission[]
  ClassActionFiles ClassActionFiles[]
}

model ClaimSubmission {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  classAction          ClassAction           @relation(fields: [classActionId], references: [id])
  classActionId        String
  formFieldSubmissions FormFieldSubmission[]
  profile              Profile?              @relation(fields: [profileId], references: [id])
  profileId            String?
}

model FormField {
  id                   String                @id @default(cuid())
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  classAction          ClassAction           @relation(fields: [classActionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classActionId        String
  formFieldSubmissions FormFieldSubmission[]
  label                String
  description          String?
  type                 FormFieldTypes        @default(INPUT)
  errorMessage         String?
  fieldOptions         String[]
}

model FormFieldSubmission {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  formField         FormField       @relation(fields: [formFieldId], references: [id])
  formFieldId       String
  claimSubmission   ClaimSubmission @relation(fields: [claimSubmissionId], references: [id])
  claimSubmissionId String
  responseValue     String          @db.VarChar(255)
}

model ClassActionFiles {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  classAction   ClassAction @relation(fields: [classActionId], references: [id])
  classActionId String
}
