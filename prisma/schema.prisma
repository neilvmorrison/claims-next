generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLASS_MEMBER
  INTERNAL_ADMINISTRATOR
  ADMINISTRATOR
}

enum ClaimStatus {
  PENDING
  UNDER_REVIEW
  ACCEPTED
  REJECTED
}

enum FormInputFieldTypes {
  TEXT
  DATE
  FILE
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole
  accounts      Account[]
  sessions      Session[]
  Profile       Profile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id          String                 @id @default(cuid())
  givenName   String
  familyName  String
  image       String?
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  auxlyClaims AuxlyClaimSubmission[]
  claims      ClaimSubmission[]
}

model AuxlyClaimSubmission {
  id            String      @id @default(cuid())
  profileId     String
  profile       Profile     @relation(fields: [profileId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  fullName      String
  email         String
  phoneNumber   String
  streetAddress String?
  addressLine2  String?
  postalCode    String?
  city          String?
  country       String?
  province      String?
  purchaseDates DateTime[]
  sellDates     DateTime[]
  securityQty   Int
  status        ClaimStatus @default(PENDING)
}

model Organization {
  id           String        @id @default(cuid())
  name         String
  description  String?       @db.Text
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  classActions ClassAction[]
}

model ClassAction {
  id               String            @id @default(cuid())
  name             String
  description      String?           @db.Text
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organization     Organization      @relation(fields: [organizationId], references: [id])
  formFields       FormInputField[]
  organizationId   String
  claimSubmissions ClaimSubmission[]
}

model FormInputField {
  id                        String                     @id @default(cuid())
  name                      String
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  classAction               ClassAction                @relation(fields: [classActionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classActionId             String
  formInputFieldSubmissions FormInputFieldSubmission[]
  label                     String
  description               String?
  type                      FormInputFieldTypes        @default(TEXT)
  errorMessage              String?
}

model ClaimSubmission {
  id                        String                     @id @default(cuid())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  classAction               ClassAction                @relation(fields: [classActionId], references: [id])
  classActionId             String
  formInputFieldSubmissions FormInputFieldSubmission[]
  profile                   Profile?                   @relation(fields: [profileId], references: [id])
  profileId                 String?
}

model FormInputFieldSubmission {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  formInputField    FormInputField  @relation(fields: [formInputFieldId], references: [id])
  formInputFieldId  String
  claimSubmission   ClaimSubmission @relation(fields: [claimSubmissionId], references: [id])
  claimSubmissionId String
  responseValue     String          @db.VarChar(255)
}
